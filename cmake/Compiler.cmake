ADD_DEFINITIONS(-DUNICODE -D_UNICODE)

IF(MSVC)
  SET(CMAKE_CXX_FLAGS "/EHsc /MP /FS /bigobj /Zc:rvalueCast /Gw")
  IF(CMAKE_C_COMPILER_ID MATCHES Clang)
    SET(BUILD_COMPILER_NAME "clangcl")
    SET(BUILD_COMPILER_CLANGCL TRUE)
    SET(CMAKE_C_COMPILER ${ClangCL_Path}clang-cl.exe)
    SET(CMAKE_CXX_COMPILER ${ClangCL_Path}clang-cl.exe)

    EXECUTE_PROCESS(COMMAND ${CMAKE_C_COMPILER} --version OUTPUT_VARIABLE CLANG_VERSION)
    STRING(REGEX MATCHALL "[0-9]+" CLANG_VERSION_COMPONENTS ${CLANG_VERSION})
    LIST(GET CLANG_VERSION_COMPONENTS 0 CLANG_MAJOR)
    LIST(GET CLANG_VERSION_COMPONENTS 1 CLANG_MINOR)
    SET(BUILD_COMPILER_VERSION ${CLANG_MAJOR}${CLANG_MINOR})

    SET(CMAKE_CXX_STANDARD 17)
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /std:c++17")

    SET(CMAKE_C_FLAGS "/bigobj /Gw")
  ELSE()
    SET(BUILD_COMPILER_NAME "vc")
    SET(BUILD_COMPILER_MSVC TRUE)
    IF(MSVC_VERSION GREATER_EQUAL 1920)
      SET(BUILD_COMPILER_VERSION "142")
    ELSEIF(MSVC_VERSION GREATER_EQUAL 1910)
      SET(BUILD_COMPILER_VERSION "141")
    ELSE()
      SET(BUILD_COMPILER_VERSION "140")
    ENDIF()

    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /Zc:throwingNew")
    IF(MSVC_VERSION GREATER 1910)
      SET(CMAKE_CXX_STANDARD 17)
      SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /std:c++17")
    ELSE()
      SET(CMAKE_CXX_STANDARD 14)
      SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /std:c++14")
    ENDIF()
    IF(MSVC_VERSION GREATER 1900)
      SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /permissive-")
      IF(MSVC_VERSION GREATER 1910)
        IF(BUILD_ARCH_NAME STREQUAL "arm64")
          SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /Zc:twoPhase-")
        ENDIF()
        IF(MSVC_VERSION GREATER 1912)
          SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /Zc:externConstexpr")
        ENDIF()
      ENDIF()
    ENDIF()

    SET(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} /MD")

    FOREACH(flag_var
      CMAKE_EXE_LINKER_FLAGS CMAKE_SHARED_LINKER_FLAGS CMAKE_MODULE_LINKER_FLAGS)
      SET(${flag_var} "/WX /pdbcompress")
    ENDFOREACH()
    FOREACH(flag_var
      CMAKE_EXE_LINKER_FLAGS_DEBUG CMAKE_SHARED_LINKER_FLAGS_DEBUG)
      SET(${flag_var} "/DEBUG:FASTLINK")
    ENDFOREACH()
    FOREACH(flag_var
      CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO CMAKE_SHARED_LINKER_FLAGS_RELWITHDEBINFO)
      SET(${flag_var} "/DEBUG:FASTLINK /INCREMENTAL:NO /LTCG:incremental /OPT:REF /OPT:ICF")
    ENDFOREACH()
    FOREACH(flag_var
      CMAKE_EXE_LINKER_FLAGS_MINSIZEREL CMAKE_SHARED_LINKER_FLAGS_MINSIZEREL CMAKE_EXE_LINKER_FLAGS_RELEASE CMAKE_SHARED_LINKER_FLAGS_RELEASE)
      SET(${flag_var} "/INCREMENTAL:NO /LTCG /OPT:REF /OPT:ICF")
    ENDFOREACH()
    FOREACH(flag_var
      CMAKE_MODULE_LINKER_FLAGS_RELEASE CMAKE_MODULE_LINKER_FLAGS_MINSIZEREL)
      SET(${flag_var} "/INCREMENTAL:NO /LTCG")
    ENDFOREACH()
    FOREACH(flag_var
      CMAKE_STATIC_LINKER_FLAGS_RELEASE CMAKE_STATIC_LINKER_FLAGS_MINSIZEREL)
      SET(${flag_var} "${${flag_var}} /LTCG")
    ENDFOREACH()
    SET(CMAKE_STATIC_LINKER_FLAGS_RELWITHDEBINFO "${CMAKE_STATIC_LINKER_FLAGS_RELWITHDEBINFO} /LTCG:incremental")

    FOREACH(flag_var
      CMAKE_CXX_FLAGS_RELEASE CMAKE_CXX_FLAGS_RELWITHDEBINFO CMAKE_CXX_FLAGS_MINSIZEREL)
      SET(${flag_var} "${${flag_var}} /GS-")
    ENDFOREACH()
    SET(CMAKE_STATIC_LINKER_FLAGS "/WX")
    SET(CMAKE_C_FLAGS ${CMAKE_CXX_FLAGS})
  ENDIF()

  SET(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /DBUILD_SHIP")
  FOREACH(flag_var
    CMAKE_CXX_FLAGS_RELEASE CMAKE_CXX_FLAGS_RELWITHDEBINFO CMAKE_CXX_FLAGS_MINSIZEREL)
    SET(${flag_var} "${${flag_var}} /fp:fast /Ob2 /GL /Qpar")
  ENDFOREACH()

  ADD_DEFINITIONS(-DWIN32 -D_WINDOWS)
  IF(BUILD_ARCH_NAME MATCHES "arm")
    ADD_DEFINITIONS(-D_ARM_WINAPI_PARTITION_DESKTOP_SDK_AVAILABLE=1)

    IF(BUILD_PLATFORM_WINDOWS_DESKTOP)
      FOREACH(flag_var
        CMAKE_C_STANDARD_LIBRARIES CMAKE_CXX_STANDARD_LIBRARIES)
        SET(${flag_var} "${${flag_var}} gdi32.lib ole32.lib oleaut32.lib comdlg32.lib advapi32.lib shell32.lib")
      ENDFOREACH()
    ENDIF()
  ENDIF()
ELSE()
  IF(CMAKE_C_COMPILER_ID MATCHES Clang)
    SET(BUILD_COMPILER_NAME "clang")
    SET(BUILD_COMPILER_CLANG TRUE)
    IF(MSVC)
      SET(BUILD_COMPILER_CLANGC2 TRUE)
    ENDIF()
  ELSEIF(MINGW)
    SET(BUILD_COMPILER_NAME "mgw")
    SET(BUILD_COMPILER_GCC TRUE)
  ELSE()
    SET(BUILD_COMPILER_NAME "gcc")
    SET(BUILD_COMPILER_GCC TRUE)
  ENDIF()

  IF(BUILD_COMPILER_CLANG)
    EXECUTE_PROCESS(COMMAND ${CMAKE_C_COMPILER} --version OUTPUT_VARIABLE CLANG_VERSION)
    STRING(REGEX MATCHALL "[0-9]+" CLANG_VERSION_COMPONENTS ${CLANG_VERSION})
    LIST(GET CLANG_VERSION_COMPONENTS 0 CLANG_MAJOR)
    LIST(GET CLANG_VERSION_COMPONENTS 1 CLANG_MINOR)
    SET(BUILD_COMPILER_VERSION ${CLANG_MAJOR}${CLANG_MINOR})
  ELSE()
    EXECUTE_PROCESS(COMMAND ${CMAKE_C_COMPILER} -dumpfullversion OUTPUT_VARIABLE GCC_VERSION)
    STRING(REGEX MATCHALL "[0-9]+" GCC_VERSION_COMPONENTS ${GCC_VERSION})
    LIST(GET GCC_VERSION_COMPONENTS 0 GCC_MAJOR)
    LIST(GET GCC_VERSION_COMPONENTS 1 GCC_MINOR)
    SET(BUILD_COMPILER_VERSION ${GCC_MAJOR}${GCC_MINOR})
  ENDIF()

  FOREACH(flag_var
    CMAKE_C_FLAGS CMAKE_CXX_FLAGS)
    SET(${flag_var} "${${flag_var}} -fpic")
    IF(NOT (ANDROID OR IOS))
      SET(${flag_var} "${${flag_var}} -march=core2 -msse2")
    ENDIF()
    IF(BUILD_COMPILER_CLANG AND (BUILD_PLATFORM_DARWIN OR BUILD_PLATFORM_IOS))
      SET(${flag_var} "${${flag_var}} -fno-asm-blocks")
    ENDIF()
  ENDFOREACH()
  # SET(CMAKE_C_STANDARD 11)
  # SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -std=c11")
  IF(BUILD_COMPILER_CLANG)
    IF(MSVC)
      SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++14")
    ELSE()
      SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++1z")
    ENDIF()
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-inconsistent-missing-override -Wno-missing-braces")
    IF(BUILD_PLATFORM_LINUX)
      SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -stdlib=libc++")
    ENDIF()
  ELSE()
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++1z -Wno-multistatement-macros -Wno-class-memaccess -Wno-aggressive-loop-optimizations")
    # SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++1z")
    IF(MINGW)
      FOREACH(flag_var
        CMAKE_C_FLAGS CMAKE_CXX_FLAGS)
        SET(${flag_var} "${${flag_var}} -Wa,-mbig-obj")
      ENDFOREACH()
    ENDIF()
  ENDIF()
  SET(CMAKE_CXX_FLAGS_DEBUG "-DDEBUG -g -O0")
  SET(CMAKE_CXX_FLAGS_RELEASE "-DNDEBUG -O2 -DBUILD_SHIP")
  SET(CMAKE_CXX_FLAGS_RELWITHDEBINFO "-DNDEBUG -g -O2")
  SET(CMAKE_CXX_FLAGS_MINSIZEREL "-DNDEBUG -Os -DBUILD_SHIP")
  IF(BUILD_ARCH_NAME STREQUAL "x86")
    FOREACH(flag_var
      CMAKE_C_FLAGS CMAKE_CXX_FLAGS)
      SET(${flag_var} "${${flag_var}} -m32")
    ENDFOREACH()
    IF(NOT MSVC)
      FOREACH(flag_var
        CMAKE_SHARED_LINKER_FLAGS CMAKE_MODULE_LINKER_FLAGS CMAKE_EXE_LINKER_FLAGS)
        SET(${flag_var} "${${flag_var}} -m32")
        IF(BUILD_PLATFORM_WINDOWS)
          SET(${flag_var} "${${flag_var}} -Wl,--large-address-aware")
        ENDIF()
      ENDFOREACH()
      IF(BUILD_PLATFORM_WINDOWS)
        SET(CMAKE_RC_FLAGS "${CMAKE_RC_FLAGS} --target=pe-i386")
      ELSE()
        SET(CMAKE_RC_FLAGS "${CMAKE_RC_FLAGS} --target=elf32-i386")
      ENDIF()
    ENDIF()
  ELSEIF((BUILD_ARCH_NAME STREQUAL "x64") OR (BUILD_ARCH_NAME STREQUAL "x86_64"))
    FOREACH(flag_var
      CMAKE_C_FLAGS CMAKE_CXX_FLAGS)
      SET(${flag_var} "${${flag_var}} -m64")
    ENDFOREACH()
    IF(NOT MSVC)
      FOREACH(flag_var
        CMAKE_SHARED_LINKER_FLAGS CMAKE_MODULE_LINKER_FLAGS CMAKE_EXE_LINKER_FLAGS)
        SET(${flag_var} "${${flag_var}} -m64")
      ENDFOREACH()
      IF(BUILD_PLATFORM_WINDOWS)
        SET(CMAKE_RC_FLAGS "${CMAKE_RC_FLAGS} --target=pe-x86-64")
      ELSE()
        SET(CMAKE_RC_FLAGS "${CMAKE_RC_FLAGS} --target=elf64-x86-64")
      ENDIF()
    ENDIF()
  ENDIF()
  IF((NOT MSVC) AND (NOT BUILD_HOST_PLATFORM_DARWIN))
    FOREACH(flag_var
      CMAKE_SHARED_LINKER_FLAGS_RELEASE CMAKE_SHARED_LINKER_FLAGS_MINSIZEREL
      CMAKE_MODULE_LINKER_FLAGS_RELEASE CMAKE_MODULE_LINKER_FLAGS_MINSIZEREL
      CMAKE_EXE_LINKER_FLAGS_RELEASE CMAKE_EXE_LINKER_FLAGS_MINSIZEREL)
      SET(${flag_var} "-s")
    ENDFOREACH()
  ENDIF()
ENDIF()

SET(CMAKE_C_FLAGS_DEBUG ${CMAKE_CXX_FLAGS_DEBUG})
SET(CMAKE_C_FLAGS_RELEASE ${CMAKE_CXX_FLAGS_RELEASE})
SET(CMAKE_C_FLAGS_RELWITHDEBINFO ${CMAKE_CXX_FLAGS_RELWITHDEBINFO})
SET(CMAKE_C_FLAGS_MINSIZEREL ${CMAKE_CXX_FLAGS_MINSIZEREL})
IF(BUILD_COMPILER_MSVC)
  SET(RTTI_FLAG "/GR")
  SET(NO_RTTI_FLAG "/GR-")
ELSE()
  SET(RTTI_FLAG "-frtti")
  IF(BUILD_COMPILER_CLANGC2)
    SET(NO_RTTI_FLAG "")
  ELSE()
    SET(NO_RTTI_FLAG "-fno-rtti")
  ENDIF()
ENDIF()
SET(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} ${RTTI_FLAG}")
FOREACH(flag_var
  CMAKE_CXX_FLAGS_RELEASE CMAKE_CXX_FLAGS_RELWITHDEBINFO CMAKE_CXX_FLAGS_MINSIZEREL)
  SET(${flag_var} "${${flag_var}} ${NO_RTTI_FLAG}")
ENDFOREACH()
IF(BUILD_PLATFORM_IOS)
  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fobjc-arc")
ELSEIF(BUILD_PLATFORM_ANDROID)
  FOREACH(flag_var CMAKE_C_FLAGS CMAKE_CXX_FLAGS)
    SET(${flag_var} "${${flag_var}} -D__ANDROID_API__=${ANDROID_NATIVE_API_LEVEL}")
  ENDFOREACH()
ENDIF()

SET(BUILD_OUTPUT_SUFFIX _${BUILD_COMPILER_NAME}${BUILD_COMPILER_VERSION})

SET(CMAKE_CXX_STANDARD_REQUIRED ON)

IF(MSVC)
  # create vcproj.user file for Visual Studio to set debug working directory
  FUNCTION(CREATE_VCPROJ_USERFILE TARGETNAME)
    SET(SYSTEM_NAME $ENV{USERDOMAIN})
    SET(USER_NAME $ENV{USERNAME})

    CONFIGURE_FILE(
      $ENV{VENUS_BUILD_PATH}/cmake/VisualStudioUserFile.vcxproj.user.in
      ${CMAKE_CURRENT_BINARY_DIR}/${TARGETNAME}.vcxproj.user
      @ONLY
    )
  ENDFUNCTION()
ENDIF()
IF(BUILD_PLATFORM_DARWIN OR BUILD_PLATFORM_IOS)
  # create .xcscheme file for Xcode to set debug working directory
  FUNCTION(CREATE_XCODE_USERFILE PROJECTNAME TARGETNAME)
    IF(BUILD_PLATFORM_DARWIN OR BUILD_PLATFORM_IOS)
      SET(SYSTEM_NAME $ENV{USERDOMAIN})
      SET(USER_NAME $ENV{USER})

      CONFIGURE_FILE(
        $ENV{VENUS_BUILD_PATH}/cmake/xcode.xcscheme.in
        ${PROJECT_BINARY_DIR}/${PROJECTNAME}.xcodeproj/xcshareddata/xcschemes/${TARGETNAME}.1.xcscheme
        @ONLY
      )
    ENDIF()
  ENDFUNCTION()
ENDIF()

FUNCTION(CREATE_PROJECT_USERFILE PROJECTNAME TARGETNAME)
  IF(MSVC)
    CREATE_VCPROJ_USERFILE(${TARGETNAME})
  ELSEIF(BUILD_PLATFORM_DARWIN OR BUILD_PLATFORM_IOS)
    CREATE_XCODE_USERFILE(${PROJECTNAME} ${TARGETNAME})
  ENDIF()
ENDFUNCTION()

FUNCTION(ADD_PRECOMPILED_HEADER TARGET_NAME PRECOMPILED_HEADER)
  GET_FILENAME_COMPONENT(pch_name ${PRECOMPILED_HEADER} NAME)
  GET_TARGET_PROPERTY(source_list ${TARGET_NAME} SOURCES)
  IF(EXISTS ${PRECOMPILED_HEADER})
    GET_FILENAME_COMPONENT(pch_header "${PRECOMPILED_HEADER}" ABSOLUTE)
  ELSE()
    FOREACH(_f ${source_list})
      GET_FILENAME_COMPONENT(__f ${_f} NAME)
      IF(NOT "${__f}" STREQUAL "${pch_name}")
        CONTINUE()
      ENDIF()
      GET_FILENAME_COMPONENT(pch_header "${_f}" ABSOLUTE)
    ENDFOREACH()
  ENDIF()
  IF(MSVC)
    ADD_MSVC_PRECOMPILED_HEADER(${TARGET_NAME} ${pch_header})
  ELSEIF(BUILD_PLATFORM_DARWIN OR BUILD_PLATFORM_IOS)
    ADD_XCODE_PRECOMPILED_HEADER(${TARGET_NAME} ${pch_header})
  # ELSEIF(NOT BUILD_PLATFORM_ANDROID)
  #   ADD_GCC_PRECOMPILED_HEADER(${TARGET_NAME} ${pch_header})
  ENDIF()
ENDFUNCTION()

FUNCTION(ADD_MSVC_PRECOMPILED_HEADER TARGET_NAME PRECOMPILED_HEADER)
  GET_FILENAME_COMPONENT(pch_base_name ${PRECOMPILED_HEADER} NAME_WE)
  GET_FILENAME_COMPONENT(pch_output "${CMAKE_CURRENT_BINARY_DIR}/${CMAKE_CFG_INTDIR}/${pch_base_name}.pch" ABSOLUTE)
  GET_FILENAME_COMPONENT(pch_header "${PRECOMPILED_HEADER}" ABSOLUTE)
  GET_TARGET_PROPERTY(source_list ${TARGET_NAME} SOURCES)
  UNSET(cpp_source_list)
  UNSET(first_cpp_file)
  FOREACH(file_name ${source_list})
    STRING(TOLOWER ${file_name} lower_file_name)
    STRING(FIND "${lower_file_name}" ".cpp" is_cpp REVERSE)
    IF(is_cpp LESS 0)
      SET_SOURCE_FILES_PROPERTIES(${file_name} PROPERTIES COMPILE_FLAGS "/Y-")
    ELSE()
      LIST(APPEND cpp_source_list "${file_name}")
      SET_SOURCE_FILES_PROPERTIES(${file_name} PROPERTIES COMPILE_FLAGS "/FI\"${pch_header}\"")
      GET_FILENAME_COMPONENT(_base ${file_name} NAME_WE)
      IF("${_base}" STREQUAL "${pch_base_name}")
        SET(first_cpp_file ${file_name})
      ENDIF()
    ENDIF()
  ENDFOREACH()
  IF(NOT first_cpp_file)
    LIST(GET cpp_source_list 0 first_cpp_file)
  ENDIF()
  SET_SOURCE_FILES_PROPERTIES(${first_cpp_file} PROPERTIES COMPILE_FLAGS "/Yc\"${pch_header}\" /FI\"${pch_header}\""
    OBJECT_OUTPUTS "${pch_output}")
  SET_TARGET_PROPERTIES(${TARGET_NAME} PROPERTIES COMPILE_FLAGS "/Yu\"${pch_header}\" /Fp\"${pch_output}\""
    OBJECT_DEPENDS "${pch_output}")
ENDFUNCTION()

FUNCTION(ADD_XCODE_PRECOMPILED_HEADER TARGET_NAME PRECOMPILED_HEADER)
  SET_TARGET_PROPERTIES(${TARGET_NAME} PROPERTIES XCODE_ATTRIBUTE_GCC_PRECOMPILE_PREFIX_HEADER YES)
	SET_TARGET_PROPERTIES(${TARGET_NAME} PROPERTIES XCODE_ATTRIBUTE_GCC_PREFIX_HEADER "${PRECOMPILED_HEADER}")
ENDFUNCTION()

FUNCTION(ADD_GCC_PRECOMPILED_HEADER TARGET_NAME PRECOMPILED_HEADER)
	SET(CXX_COMPILE_FLAGS ${CMAKE_CXX_FLAGS})
	IF(CMAKE_BUILD_TYPE)
		STRING(TOUPPER ${CMAKE_BUILD_TYPE} UPPER_CMAKE_BUILD_TYPE)
		LIST(APPEND CXX_COMPILE_FLAGS ${CMAKE_CXX_FLAGS_${UPPER_CMAKE_BUILD_TYPE}})
	ENDIF()

	GET_FILENAME_COMPONENT(PRECOMPILED_HEADER_NAME ${PRECOMPILED_HEADER} NAME)

	SET(PCH_OUTPUT "${CMAKE_CURRENT_BINARY_DIR}/${PRECOMPILED_HEADER_NAME}.gch")

	SET(include_dirs "$<TARGET_PROPERTY:${TARGET_NAME},INCLUDE_DIRECTORIES>")
	SET(comp_defs "$<TARGET_PROPERTY:${TARGET_NAME},COMPILE_DEFINITIONS>")
	SET(comp_flags "$<TARGET_PROPERTY:${TARGET_NAME},COMPILE_FLAGS>")
	SET(comp_options "$<TARGET_PROPERTY:${TARGET_NAME},COMPILE_OPTIONS>")
	SET(include_dirs "$<$<BOOL:${include_dirs}>:-I$<JOIN:${include_dirs},\n-I>\n>")
	SET(comp_defs "$<$<BOOL:${comp_defs}>:-D$<JOIN:${comp_defs},\n-D>\n>")
	SET(comp_flags "$<$<BOOL:${comp_flags}>:$<JOIN:${comp_flags},\n>\n>")
	SET(comp_options "$<$<BOOL:${comp_options}>:$<JOIN:${comp_options},\n>\n>")
	SET(pch_flags_file "${CMAKE_CURRENT_BINARY_DIR}/compile_flags.rsp")
	FILE(GENERATE OUTPUT "${pch_flags_file}" CONTENT "${comp_defs}${include_dirs}${comp_flags}${comp_options}\n")
	SET(pch_compile_flags "@${pch_flags_file}")

	GET_TARGET_PROPERTY(PIC_OPTION ${TARGET_NAME} POSITION_INDEPENDENT_CODE)
	IF(PIC_OPTION AND CMAKE_CXX_COMPILE_OPTIONS_PIC)
		LIST(APPEND CXX_COMPILE_FLAGS "${CMAKE_CXX_COMPILE_OPTIONS_PIC}")
	ENDIF()

	LIST(APPEND CXX_COMPILE_FLAGS "-Wno-error -x c++-header")
	IF(BUILD_COMPILER_CLANG)
		LIST(APPEND CXX_COMPILE_FLAGS "-Wno-pragma-once-outside-header")
	ENDIF()

	SEPARATE_ARGUMENTS(CXX_COMPILE_FLAGS)

	ADD_CUSTOM_COMMAND(OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/${PRECOMPILED_HEADER_NAME}
		COMMAND ${CMAKE_COMMAND} -E copy ${PRECOMPILED_HEADER} ${CMAKE_CURRENT_BINARY_DIR}/${PRECOMPILED_HEADER_NAME}
	)

	SET(PCHOUTPUT ${CMAKE_CURRENT_BINARY_DIR}/${PRECOMPILED_HEADER_NAME})

	ADD_CUSTOM_COMMAND(OUTPUT ${PCH_OUTPUT}
		COMMAND ${CMAKE_CXX_COMPILER} ${pch_compile_flags} ${CXX_COMPILE_FLAGS} -o ${PCH_OUTPUT} ${PRECOMPILED_HEADER}
		DEPENDS ${PRECOMPILED_HEADER} ${CMAKE_CURRENT_BINARY_DIR}/${PRECOMPILED_HEADER_NAME}
	)
	ADD_CUSTOM_TARGET(${TARGET_NAME}_gch
		DEPENDS ${PCH_OUTPUT}
	)
	ADD_DEPENDENCIES(${TARGET_NAME} ${TARGET_NAME}_gch)

	GET_PROPERTY(source_list TARGET ${TARGET_NAME} PROPERTY SOURCES)
	FOREACH(file_name ${source_list})
		STRING(TOLOWER ${file_name} lower_file_name)
		STRING(FIND "${lower_file_name}" ".cpp" is_cpp REVERSE)
		IF(is_cpp GREATER 0)
			SET_SOURCE_FILES_PROPERTIES(${_source} PROPERTIES
				COMPILE_FLAGS "-include ${CMAKE_CURRENT_BINARY_DIR}/${PRECOMPILED_HEADER_NAME} -Winvalid-pch"
				OBJECT_DEPENDS "${PCHOUTPUT}")
		ENDIF()
	ENDFOREACH()
ENDFUNCTION()

FUNCTION(DISABLE_WARNINGS TARGET_NAME WARNINGS)
  INCLUDE(CheckCCompilerFlag)
  FOREACH(_w ${WARNINGS})
    STRING(REGEX MATCH "[0-9]+" _vc ${_w})
    IF("${_vc}" STREQUAL "${_w}")
      IF(MSVC)
        TARGET_COMPILE_OPTIONS(${TARGET_NAME} PRIVATE /wd${_vc})
      ENDIF()
    ELSE()
      IF(NOT MSVC)
        SET(_CCOPT -Wno-${_w})
        STRING(REGEX MATCH "#.+" _ios ${_w})
        IF("${_w}" STREQUAL "${_ios}" AND NOT BUILD_PLATFORM_IOS)
          SET(_OPTVAR false)
        ELSE()
          STRING(MAKE_C_IDENTIFIER "OPT${_CCOPT}" _OPTVAR)
          CHECK_C_COMPILER_FLAG(${_CCOPT} ${_OPTVAR})
        ENDIF()
        IF(${_OPTVAR})
          TARGET_COMPILE_OPTIONS(${TARGET_NAME} PRIVATE ${_CCOPT})
        ENDIF()
      ENDIF()
    ENDIF()
  ENDFOREACH()
ENDFUNCTION()
