FILE(TO_CMAKE_PATH $ENV{ROOT_PATH} ROOT_PATH)
FILE(TO_CMAKE_PATH $ENV{BINARY_PATH} BINARY_PATH)
FILE(TO_CMAKE_PATH $ENV{BUILD_PATH} BUILD_PATH)
FILE(TO_CMAKE_PATH $ENV{DOCUMENT_PATH} DOCUMENT_PATH)
FILE(TO_CMAKE_PATH $ENV{INSTALL_PATH} INSTALL_PATH)
SET(BIN_DIR_NAME $ENV{BIN_DIR_NAME})
SET(BUILD_DIR_NAME $ENV{BUILD_DIR_NAME})
SET(DOC_DIR_NAME $ENV{DOC_DIR_NAME})
SET(INC_DIR_NAME $ENV{INC_DIR_NAME})
SET(SRC_DIR_NAME $ENV{SRC_DIR_NAME})
SET(LIB_DIR_NAME $ENV{LIB_DIR_NAME})
SET(PREFER_LIB $ENV{PREFER_LIB})
SET(BUILD_LIB $ENV{BUILD_LIB})
SET(COMPILE_INFO $ENV{COMPILE_INFO})

SET_PROPERTY(GLOBAL PROPERTY USE_FOLDERS ON)

MACRO(TO_FILE_LIST __out _files _path)
  FOREACH(_F ${_files})
    FILE(TO_CMAKE_PATH ${_path}/${_F} _F)
    LIST(APPEND ${__out} ${_F})
  ENDFOREACH()
ENDMACRO()

MACRO(GET_FILE_LIST __out _path)
  FILE(TO_CMAKE_PATH ${_path} _cmake_path)
  GET_FILENAME_COMPONENT(_root ${_cmake_path} DIRECTORY)
  FILE(GLOB_RECURSE ${__out} ${_cmake_path}/*)
ENDMACRO()

MACRO(SET_SOURCE_GROUP _file_folder _files _path)
  FILE(TO_CMAKE_PATH ${_path} _path)
  FOREACH(_f ${_files})
    IF(NOT EXISTS ${_f})
      FILE(TO_CMAKE_PATH "${_path}/${_f}" _f)
      IF(NOT EXISTS ${_f})
        CONTINUE()
      ENDIF()
    ENDIF()
    FILE(TO_CMAKE_PATH ${_f} _f)
    STRING(REPLACE ${_path}/ ${_file_folder}/ _ff ${_f})
    GET_FILENAME_COMPONENT(_p ${_ff} DIRECTORY)
    STRING(REPLACE / \\ _p ${_p})
    SOURCE_GROUP(${_p} FILES ${_f})
  ENDFOREACH()
ENDMACRO()

MACRO(INSTALL_HEADERS _name _headers _h_paths)
  FOREACH(_path ${_h_paths})
    FILE(TO_CMAKE_PATH "${_path}" _path)
    FOREACH(_h ${_headers})
      IF(NOT EXISTS ${_h})
        FILE(TO_CMAKE_PATH "${_path}/${_h}" _f)
        IF(NOT EXISTS ${_f})
          CONTINUE()
        ENDIF()
      ELSE()
        SET(_f ${_h})
      ENDIF()
      GET_FILENAME_COMPONENT(_p ${_f} DIRECTORY)
      STRING(REPLACE ${_path} "" _p ${_p})
      IF("${_p}" STREQUAL "")
        SET(_p ${INSTALL_PATH}/${INC_DIR_NAME}/${_name})
      ELSE()
        SET(_p ${INSTALL_PATH}/${INC_DIR_NAME}/${_name}/${_p})
      ENDIF()
      INSTALL(FILES ${_f} DESTINATION ${_p})
    ENDFOREACH()
  ENDFOREACH()
ENDMACRO()

MACRO(INSTALL_LIBRARIES _name)
  IF(CMAKE_CONFIGURATION_TYPES)
    FOREACH(_C ${CMAKE_CONFIGURATION_TYPES})
      INSTALL(TARGETS ${_name} CONFIGURATIONS ${_C}
        RUNTIME DESTINATION ${INSTALL_PATH}/${LIB_DIR_NAME}/${COMPILE_INFO}/${_C}
        LIBRARY DESTINATION ${INSTALL_PATH}/${LIB_DIR_NAME}/${COMPILE_INFO}/${_C}
        ARCHIVE DESTINATION ${INSTALL_PATH}/${LIB_DIR_NAME}/${COMPILE_INFO}/${_C})
      IF(BUILD_PLATFORM_WINDOWS)
        INSTALL(DIRECTORY ${BINARY_PATH}/${COMPILE_INFO}/${_C}
          DESTINATION ${INSTALL_PATH}/${LIB_DIR_NAME}/${COMPILE_INFO}
          FILES_MATCHING PATTERN ${_name}.pdb)
      ENDIF()
    ENDFOREACH()
  ELSE()
    INSTALL(TARGETS ${_name}
      RUNTIME DESTINATION ${INSTALL_PATH}/${LIB_DIR_NAME}/${COMPILE_INFO}/${CMAKE_BUILD_TYPE}
      LIBRARY DESTINATION ${INSTALL_PATH}/${LIB_DIR_NAME}/${COMPILE_INFO}/${CMAKE_BUILD_TYPE}
      ARCHIVE DESTINATION ${INSTALL_PATH}/${LIB_DIR_NAME}/${COMPILE_INFO}/${CMAKE_BUILD_TYPE})
  ENDIF()
ENDMACRO()

MACRO(INSTALL_BINARIES _name)
  IF(NOT BUILD_LIB STREQUAL "SHARED" AND BUILD_IS_DEV_PLATFORM)
    IF(CMAKE_CONFIGURATION_TYPES)
      INSTALL(TARGETS ${_name} CONFIGURATIONS Release
        RUNTIME DESTINATION ${INSTALL_PATH}/${BIN_DIR_NAME}/${COMPILE_INFO})
    ELSE()
      IF("${CMAKE_BUILD_TYPE}" STREQUAL "Release")
        INSTALL(TARGETS ${_name}
          RUNTIME DESTINATION ${INSTALL_PATH}/${BIN_DIR_NAME}/${COMPILE_INFO})
      ENDIF()
    ENDIF()
  ENDIF()
ENDMACRO()

MACRO(INSTALL_PLUGIN_UNITY _name)
  IF(BUILD_PLATFORM_WINDOWS)
    INSTALL(TARGETS ${_name} CONFIGURATIONS Release
      RUNTIME DESTINATION ${INSTALL_PATH}/${_name}/Plugins/${BUILD_ARCH_NAME})
  ELSEIF(BUILD_PLATFORM_DARWIN)
    INSTALL(TARGETS ${_name} CONFIGURATIONS Release
      LIBRARY DESTINATION ${INSTALL_PATH}/${_name}/Plugins)
  ELSEIF(BUILD_PLATFORM_IOS)
    INSTALL(TARGETS ${_name} CONFIGURATIONS Release
      RUNTIME DESTINATION ${INSTALL_PATH}/${_name}/Plugins/iOS
      LIBRARY DESTINATION ${INSTALL_PATH}/${_name}/Plugins/iOS
      ARCHIVE DESTINATION ${INSTALL_PATH}/${_name}/Plugins/iOS)
  ELSEIF(BUILD_PLATFORM_ANDROID)
    IF(CMAKE_BUILD_TYPE STREQUAL "RelWithDebInfo")
      INSTALL(TARGETS ${_name}
        LIBRARY DESTINATION ${INSTALL_PATH}/${_name}/Plugins/Android/libs/${ANDROID_ABI})
    ELSEIF(CMAKE_BUILD_TYPE STREQUAL "Release")
      INSTALL(TARGETS ${_name}
          LIBRARY DESTINATION ${INSTALL_PATH}/${_name}/Plugins/Android/libs/${ANDROID_ABI}_no_symbols)
    ENDIF()
  ENDIF()
ENDMACRO()

MACRO(FIND_LIBS _name _libs)
  FOREACH(_lib ${_libs})
    STRING(TOUPPER ${_lib} _lib_upper)
    IF(NOT ${_lib_upper}_FOUND)
      FIND_PACKAGE(${_lib_upper})
    ENDIF()
    IF(${_lib_upper}_FOUND)
      IF(DEFINED ${_lib_upper}_DEPENDENTS)
        FIND_LIBS(${_name} "${${_lib_upper}_DEPENDENTS}")
      ENDIF()
    ENDIF()
  ENDFOREACH()
ENDMACRO()

MACRO(LINK_MULTI_LIB __out _name _lib _path)
  IF(BUILD_LIB STREQUAL "SHARED")
    IF(BUILD_PLATFORM_WINDOWS)
      SET(DLL_NAME ${_lib}.dll)
    ELSEIF(BUILD_PLATFORM_DARWIN)
      SET(DLL_NAME lib${_lib}.dylib)
    ELSE()
      SET(DLL_NAME lib${_lib}.so)
    ENDIF()
    SET(EXT_LIB_SHARED true)
  ELSE()
    SET(EXT_LIB_SHARED false)
  ENDIF()
  IF(BUILD_PLATFORM_WINDOWS)
    SET(LIB_NAME ${_lib}.lib)
  ELSEIF(EXT_LIB_SHARED AND BUILD_PLATFORM_DARWIN)
    SET(LIB_NAME lib${_lib}.dylib)
  ELSEIF(EXT_LIB_SHARED)
    SET(LIB_NAME lib${_lib}.so)
  ELSE()
    SET(LIB_NAME lib${_lib}.a)
  ENDIF()
  IF(CMAKE_CONFIGURATION_TYPES)
    FOREACH(_C ${CMAKE_CONFIGURATION_TYPES})
      SET(_C_LIB $<$<CONFIG:${_C}>:${_path}/${COMPILE_INFO}/${_C}/${LIB_NAME}>)
      TARGET_LINK_LIBRARIES(${_name} ${_C_LIB})
      LIST(APPEND ${__out} ${_C_LIB})
      IF(EXT_LIB_SHARED)
        IF(EXISTS ${_path}/${COMPILE_INFO}/${_C}/${DLL_NAME})
          FILE(COPY ${_path}/${COMPILE_INFO}/${_C}/${DLL_NAME}
            DESTINATION ${OUTPUT_PATH}/${_C})
        ENDIF()
        IF(EXISTS ${_path}/${COMPILE_INFO}/${_C}/${_lib}.pdb)
          FILE(COPY ${_path}/${COMPILE_INFO}/${_C}/${_lib}.pdb
            DESTINATION ${OUTPUT_PATH}/${_C})
        ENDIF()
      ENDIF()
    ENDFOREACH()
  ELSE()
    SET(_C_LIB ${_path}/${COMPILE_INFO}/${CMAKE_BUILD_TYPE}/${LIB_NAME})
    TARGET_LINK_LIBRARIES(${_name} ${_C_LIB})
    LIST(APPEND ${__out} ${_C_LIB})
    IF(EXT_LIB_SHARED)
      IF(EXISTS ${_path}/${COMPILE_INFO}/${_C}/${DLL_NAME})
        FILE(COPY ${_path}/${COMPILE_INFO}/${_C}/${DLL_NAME}
          DESTINATION ${OUTPUT_PATH})
      ENDIF()
    ENDIF()
  ENDIF()
ENDMACRO()

MACRO(LINK_LIBS __out _name _libs)
  FOREACH(_lib ${_libs})
    STRING(TOUPPER ${_lib} _lib_upper)
    IF(${_lib_upper}_FOUND)
      IF(DEFINED ${_lib_upper}_INCLUDE_DIR)
        TARGET_INCLUDE_DIRECTORIES(${_name} PUBLIC ${${_lib_upper}_INCLUDE_DIR})
      ENDIF()
      FOREACH(_UD ${${_lib_upper}_USER_DEFINITIONS})
        TARGET_COMPILE_DEFINITIONS(${_name} PRIVATE ${_UD})
      ENDFOREACH()
      IF(DEFINED ${_lib_upper}_MULTI_LIB)
        LINK_MULTI_LIB(${__out} ${_name} ${_lib} ${${_lib_upper}_LIBRARY})
      ELSE()
        TARGET_LINK_LIBRARIES(${_name} ${${_lib_upper}_LIBRARY})
        LIST(APPEND ${__out} "${${_lib_upper}_LIBRARY}")
      ENDIF()
      IF(DEFINED ${_lib_upper}_DEPENDENTS)
        LINK_LIBS(${__out} ${_name} "${${_lib_upper}_DEPENDENTS}")
      ENDIF()
    ENDIF()
  ENDFOREACH()
ENDMACRO()

MACRO(FIND_FILES _out _paths _wildcards)
  FOREACH(_path ${_paths})
    FOREACH(_wildcard ${_wildcards})
      FILE(GLOB_RECURSE _list ${_path}/${_wildcard})
      LIST(APPEND ${_out} ${_list})
    ENDFOREACH()
  ENDFOREACH()
ENDMACRO()

MACRO(ADD_TARGET __out _group _name _files _f_path _defs _incs _libs _no_warn _target)
  FIND_LIBS(${_name} "${_libs}" ${_app})
  SET(_is_bin true)
  IF(${_target} MATCHES "app")
    IF(BUILD_PLATFORM_IOS)
      ADD_EXECUTABLE(${_name} MACOSX_BUNDLE ${_files})
    ELSEIF(BUILD_PLATFORM_ANDROID)
      ADD_LIBRARY(${_name} SHARED ${_files})
    ELSE()
      ADD_EXECUTABLE(${_name} ${_files})
    ENDIF()
    TARGET_COMPILE_DEFINITIONS(${_name}
      PRIVATE BUILD_APP)
    IF("${_target}" STREQUAL "app_win" AND BUILD_PLATFORM_WINDOWS_DESKTOP)
      SET_TARGET_PROPERTIES(${_name} PROPERTIES LINK_FLAGS "/SUBSYSTEM:WINDOWS")
      TARGET_COMPILE_DEFINITIONS(${_name} PRIVATE SUBSYSTEM_WINDOWS)
    ENDIF()
  ELSEIF(${_target} MATCHES "lib")
    IF(BUILD_LIB MATCHES "SHARED" AND NOT "${_target}" STREQUAL "lib_static")
      ADD_LIBRARY(${_name} SHARED ${_files})
      STRING(TOUPPER ${_name} _name_upper)
      TARGET_COMPILE_DEFINITIONS(${_name}
        PRIVATE BUILD_SHARED_LIB
        PRIVATE ${_name_upper}_EXPORTS)
    ELSE()
      ADD_LIBRARY(${_name} STATIC ${_files})
      TARGET_COMPILE_DEFINITIONS(${_name}
        PRIVATE BUILD_STATIC_LIB)
      SET(_is_bin false)
    ENDIF()
  ELSEIF(${_target} MATCHES "plugin")
    IF(BUILD_PLATFORM_DARWIN)
      ADD_LIBRARY(${_name} MODULE ${_files})
      SET_TARGET_PROPERTIES(${_name} PROPERTIES BUNDLE TRUE)
    ELSEIF(BUILD_PLATFORM_IOS)
      ADD_LIBRARY(${_name} STATIC ${_files})
    ELSE()
      ADD_LIBRARY(${_name} SHARED ${_files})
    ENDIF()
    TARGET_COMPILE_DEFINITIONS(${_name}
      PRIVATE BUILD_UNITY_PLUGIN)
  ENDIF()
  LINK_LIBS(${__out} ${_name} "${_libs}")
  IF("${_incs}" STREQUAL "")
    FILE(TO_CMAKE_PATH ${_f_path} _inc_dirs)
  ELSE()
    UNSET(_inc_dirs)
    FOREACH(_inc ${_incs})
      GET_FILENAME_COMPONENT(_inc_dir ${_f_path}/${_inc} ABSOLUTE)
      IF(NOT EXISTS ${_inc_dir})
        SET(_inc_dir ${_inc})
      ENDIF()
      IF(NOT EXISTS ${_inc_dir})
        MESSAGE(WARNING "[${_inc}] not found for include")
        CONTINUE()
      ENDIF()
      LIST(APPEND _inc_dirs ${_inc_dir})
    ENDFOREACH()
  ENDIF()
  FOREACH(_inc_dir ${_inc_dirs})
    TARGET_INCLUDE_DIRECTORIES(${_name} PRIVATE ${_inc_dir})
  ENDFOREACH()
  IF(${_is_bin})
    IF(BUILD_PLATFORM_WINDOWS)
      TARGET_LINK_LIBRARIES(${_name} ws2_32 winmm wldap32 psapi iphlpapi userenv)
    ELSEIF(BUILD_PLATFORM_ANDROID)
      TARGET_LINK_LIBRARIES(${_name} android log c++_static)
    ELSEIF(BUILD_PLATFORM_LINUX)
      TARGET_LINK_LIBRARIES(${_name} pthread dl rt m)
    ELSEIF(BUILD_PLATFORM_DARWIN)
      FIND_LIBRARY(CORE_FOUNDARION CoreFoundation)
      TARGET_LINK_LIBRARIES(${_name} ${CORE_FOUNDARION} ldap resolv)
    ENDIF()
  ENDIF()
  IF(${_no_warn})
    IF(BUILD_PLATFORM_WINDOWS)
      TARGET_COMPILE_OPTIONS(${_name} PRIVATE /W0)
    ELSE()
      TARGET_COMPILE_OPTIONS(${_name} PRIVATE -w)
    ENDIF()
  ELSE()
    IF(BUILD_PLATFORM_WINDOWS)
      TARGET_COMPILE_OPTIONS(${_name} PRIVATE /W4 /WX)
    ELSE()
      # TARGET_COMPILE_OPTIONS(${_name} PRIVATE -W -Wall -Wextra -Werror)
      TARGET_COMPILE_OPTIONS(${_name} PRIVATE -W -Wall -Werror)
    ENDIF()
  ENDIF()
  IF(BUILD_LIB MATCHES "SHARED")
    TARGET_COMPILE_DEFINITIONS(${_name}
      PRIVATE PREFER_SHARED_LIB)
  ELSE()
    TARGET_COMPILE_DEFINITIONS(${_name}
      PRIVATE PREFER_STATIC_LIB)
  ENDIF()
  TARGET_COMPILE_DEFINITIONS(${_name}
    PRIVATE BUILD_ARCH_${BUILD_ARCH_NAME_UPPER}
    PRIVATE BUILD_PLATFORM_${BUILD_PLATFORM_NAME_UPPER})
  IF (NOT CMAKE_CONFIGURATION_TYPES)
    STRING(TOUPPER ${CMAKE_BUILD_TYPE} _C_UPPER)
    TARGET_COMPILE_DEFINITIONS(${_name} PRIVATE BUILD_${_C_UPPER})
  ELSE()
    UNSET(_C)
    FOREACH(_C ${CMAKE_CONFIGURATION_TYPES})
      STRING(TOUPPER ${_C} _C_UPPER)
      TARGET_COMPILE_DEFINITIONS(${_name} PRIVATE $<$<CONFIG:${_C_UPPER}>:BUILD_${_C_UPPER}>)
    ENDFOREACH()
  ENDIF()
  FOREACH(_def ${_defs})
    TARGET_COMPILE_DEFINITIONS(${_name}
      PRIVATE ${_def})
  ENDFOREACH()
  SET_TARGET_PROPERTIES(${_name} PROPERTIES FOLDER ${_group})
ENDMACRO()

MACRO(ADD_APP_WITH_SOURCE _group _name _files _f_path _defs _incs _libs _no_warn _win)
  IF(${_win})
    SET(_target "app_win")
  ELSE()
    SET(_target "app")
  ENDIF()
  ADD_TARGET(_linked "${_group}" "${_name}" "${_files}" "${_f_path}" "${_defs}" "${_incs}" "${_libs}" "${_no_warn}" "${_target}")
ENDMACRO()

MACRO(ADD_VENUS3D_APP _name _ver _appid _win)
  IF(NOT BUILD_IS_DEV_PLATFORM)
    RETURN()
  ENDIF()
  GET_FILE_LIST(_files ${ROOT_PATH}/${BUILD_GROUP}/${_name})
  SET(APP_NAME ${_name})
  SET(APP_VER ${_ver})
  SET(DEVELOPMENT_PROJECT_NAME ${_name})
  SET(APP_IDENTIFIER ${_appid})
  SET(ENTRY_FILE ${PROJECT_BINARY_DIR}/${_name}/VeEntry.cpp)
  CONFIGURE_FILE(${VENUS_BUILD_PATH}/cmake/VeEntry.cpp.in
    ${ENTRY_FILE} @ONLY)
  SOURCE_GROUP("Entry" FILES ${ENTRY_FILE})
  LIST(APPEND _files ${ENTRY_FILE})
  ADD_APP_WITH_SOURCE("${BUILD_GROUP}" "${_name}" "${_files}"
    "${ROOT_PATH}/${BUILD_GROUP}/${_name}"
    "${_defs}" "${_incs}" "Venus3D" false "${_win}")
ENDMACRO()

MACRO(ADD_LIB_WITH_SOURCE _group _name _files _f_path _headers _h_paths _defs _incs _libs _no_warn _static)
  IF(${_static})
    SET(_target "lib_static")
  ELSE()
    SET(_target "lib")
  ENDIF()
  UNSET(__incs)
  FOREACH(_inc ${_h_paths})
    LIST(APPEND __incs ${_inc})
  ENDFOREACH()
  FOREACH(_inc ${_incs})
    LIST(APPEND __incs ${_inc})
  ENDFOREACH()
  ADD_TARGET(_linked "${_group}" "${_name}" "${_files}" "${_f_path}" "${_defs}" "${__incs}" "${_libs}" "${_no_warn}" "${_target}")
  INSTALL_HEADERS("${_name}" "${_headers}" "${_h_paths}")
  INSTALL_LIBRARIES("${_name}")
  STRING(TOUPPER ${_name} _name_upper)
  SET(${_name_upper}_FOUND true)
  UNSET(${_name_upper}_MULTI_LIB)
  SET(${_name_upper}_INCLUDE_DIR "${_h_paths}")
  SET(${_name_upper}_LIBRARY ${_name} ${_linked})
  SET(${_name_upper}_USER_DEFINITIONS "USE_${_name_upper}")
  UNSET(${_name_upper}_DEPENDENTS)
  FOREACH(_lib ${_libs})
    LIST(APPEND ${_name_upper}_DEPENDENTS ${_lib})
  ENDFOREACH()
ENDMACRO()

MACRO(ADD_LIB _group _name _defs _incs _libs _no_warn)
  UNSET(_files)
  GET_FILE_LIST(_files ${ROOT_PATH}/${_group}/${_name})
  SET_SOURCE_GROUP("${_name}" "${_files}" "${ROOT_PATH}/${_group}/${_name}")
  IF("${_incs}" STREQUAL "")
    SET(__incs ${ROOT_PATH}/${_group}/${_name})
  ELSE()
    SET(__incs "${_incs}")
  ENDIF()
  UNSET(_headers)
  FIND_FILES(_headers "${__incs}" "*.h;*.inl")
  ADD_LIB_WITH_SOURCE("${_group}" "${_name}" "${_files}" "${ROOT_PATH}/${_group}/${_name}"
    "${_headers}" "${__incs}" "${_defs}" "" "${_libs}" "${_no_warn}" false)
ENDMACRO()

MACRO(ADD_UNITY_PLUGIN_WITH_SOURCE _group _name _files _f_path _defs _incs _libs)
  ADD_TARGET(_linked "${_group}" "${_name}" "${_files}" "${_f_path}"
    "${_defs}" "${_incs}" "${_libs}" false "plugin_unity")
    INSTALL_PLUGIN_UNITY(${_name})
ENDMACRO()

MACRO(ADD_UNITY_VENUS3D_PLUGIN _group _name _incs)
  UNSET(_files)
  GET_FILE_LIST(_files ${ROOT_PATH}/${_group}/${_name})
  ADD_UNITY_PLUGIN_WITH_SOURCE("${_group}" "${_name}"
    "${_files}" "${ROOT_PATH}/${_group}/${_name}"
    "" "${_incs}" "Venus3D")
ENDMACRO()

# TRANSFORM_MAKEFILE_INC
#
# This function consumes the "Makefile.inc" autotools file, and converts it into
#  "Makefile.inc.cmake", a cmake include file; transforming this:
#
# CSOURCES = ares__close_sockets.c	\
#   ares__get_hostent.c			\
#   ares__read_line.c			\
#   ...
#
#   into this:
#
# SET (CSOURCES
# 	ares__close_sockets.c
# 	ares__get_hostent.c
# 	ares__read_line.c
#	...
FUNCTION(TRANSFORM_MAKEFILE_INC INPUT_FILE OUTPUT_FILE)
	FILE(READ ${INPUT_FILE} MAKEFILE_INC_TEXT)
	STRING(REPLACE "$(top_srcdir)"   "\${PROJECT_SOURCE_DIR}" MAKEFILE_INC_TEXT ${MAKEFILE_INC_TEXT})
	STRING(REPLACE "$(top_builddir)" "\${PROJECT_BINARY_DIR}" MAKEFILE_INC_TEXT ${MAKEFILE_INC_TEXT})

	STRING(REGEX REPLACE "\\\\\n" "ß!ß" MAKEFILE_INC_TEXT ${MAKEFILE_INC_TEXT})
	STRING(REGEX REPLACE "([a-zA-Z_][a-zA-Z0-9_]*)[\t ]*=[\t ]*([^\n]*)" "SET(\\1 \\2)" MAKEFILE_INC_TEXT ${MAKEFILE_INC_TEXT})
	STRING(REPLACE "ß!ß" "\n" MAKEFILE_INC_TEXT ${MAKEFILE_INC_TEXT})

	STRING(REGEX REPLACE "\\$\\(([a-zA-Z_][a-zA-Z0-9_]*)\\)" "\${\\1}" MAKEFILE_INC_TEXT ${MAKEFILE_INC_TEXT})    # Replace $() with ${}
	STRING(REGEX REPLACE "@([a-zA-Z_][a-zA-Z0-9_]*)@" "\${\\1}" MAKEFILE_INC_TEXT ${MAKEFILE_INC_TEXT})    # Replace @@ with ${}, even if that may not be read by CMake scripts.
	FILE(WRITE ${OUTPUT_FILE} ${MAKEFILE_INC_TEXT})
ENDFUNCTION()
